* Emacs Lisp
** Requirements                                                   :noexport:
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  ;;; the-elisp.el --- Support for Emacs Lisp

  (require 'the-bind-key)
  (require 'the-check)
  (require 'the-custom)
  (require 'the-eldoc)
  (require 'the-indent)
  (require 'the-lisp)
  (require 'the-package)
  (require 'the-patch)
#+end_src

** Hooks
Enable ElDoc for Elisp buffers and the *scratch* buffer.
#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
#+end_src

Enable Aggressive Indent for Elisp buffers and the *scratch* buffer.

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
#+end_src

** Fixes
*** Advised Function Noise
Emacs barfs up a bunch of nonsense warnings every time a function is
advised, and we do that a lot, so we'll just tell it to hush.

#+begin_src emacs-lisp
  (setq ad-redefinition-action 'accept)
#+end_src

** Reloading the Init File
First, we define a customizable keybinding to reload our init file.

#+begin_src emacs-lisp
  (defcustom the-reload-init-keybinding
    (the-join-keys the-prefix "r")
    "The keybinding for reloading init.el, as a string.
  Nil means no keybinding is established."
    :group 'the
    :type 'string)
#+end_src

Now we define a function to actually do the reload and bind it to our
key.

#+begin_src emacs-lisp
  (defun the-reload-init ()
    "Reload init.el."
    (interactive)
    (straight-transaction
      (straight-mark-transaction-as-init)
      (message "Reloading init.el...")
      (load user-init-file nil 'nomessage)
      (message "Reloading init.el... done.")))

  (bind-key the-reload-init-keybinding #'the-reload-init)
#+end_src

** Evaluate an Elisp buffer
Other Lisp interaction modes (like CIDER and Geiser) provide a binding
for evaluating a whole buffer. We add a similar binding for
=eval-buffer=, as well as some sanity-checking so we don't evaluate
the init file in a bad way.

#+begin_src emacs-lisp
  (defun the-eval-buffer ()
    "Evaluate the current buffer as Elisp code."
    (interactive)
    (message "Evaluating %s..." (buffer-name))
    (straight-transaction
      (if (null buffer-file-name)
          (eval-buffer)
        (when (string= buffer-file-name user-init-file)
          (straight-mark-transaction-as-init))
        (load buffer-file-name nil 'nomessage)))
    (message "Evaluating %s... done." (buffer-name)))

  (bind-key "C-c C-k" #'the-eval-buffer emacs-lisp-mode-map)
#+end_src

** Rebind Find Commands
Add keybindings (=C-h C-f= and =C-h C-v=) for jumping to the source of
Elisp functions and variables. Also, add a keybinding (=C-h C-o=) that
performs the functionality of =M-.= only for Elisp, because the latter
command is often rebound by other major modes. Note that this
overrides the default bindings of =C-h C-f= (=view-emacs-FAQ=) and
=C-h C-o= (=describe-distribution=), but I've never used those in 10
years of Emacsing.

#+begin_src emacs-lisp
  (defun find-symbol (&optional symbol)
    "Same as `xref-find-definitions' but only for Elisp symbols."
    (interactive)
    (let ((xref-backend-functions '(elisp--xref-backend)))
      (if symbol
          (xref-find-definitions symbol)
        (call-interactively 'xref-find-definitions))))

  (bind-keys
   ("C-h C-f" . find-function)
   ("C-h C-v" . find-variable)
   ("C-h C-o" . find-symbol))
#+end_src

** Lisp Interaction Lighter
Show `lisp-interaction-mode' as "ξι" instead of "Lisp Interaction" in
the mode line.

#+begin_src emacs-lisp
  (defun the--rename-lisp-interaction-mode ()
    (setq mode-name "ξι"))

  (add-hook 'lisp-interaction-mode-hook
            #'the--rename-lisp-interaction-mode)
#+end_src

** Provides                                                       :noexport:
#+begin_src emacs-lisp
  (provide 'the-elisp)

  ;;; the-elisp.el ends here
#+end_src
